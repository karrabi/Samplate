version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    restart: unless-stopped

  kafka1:
    image: wurstmeister/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - kafka-net
    restart: unless-stopped

  kafka2:
    image: wurstmeister/kafka:latest
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_BROKER_ID: 2
    depends_on:
      - zookeeper
    networks:
      - kafka-net
    restart: unless-stopped

  kafka3:
    image: wurstmeister/kafka:latest
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_BROKER_ID: 3
    depends_on:
      - zookeeper
    networks:
      - kafka-net
    restart: unless-stopped


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: always
    networks:
      - kafka-net
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  producer1:
    build: ./app
    container_name: producer1
    command: python /app/producer-crypto.py
    volumes:
      - ./app:/app
    networks:
      - kafka-net
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - redis


  consumer1:
    build: ./app
    container_name: consumer1
    command: python /app/consumer1.py
    volumes:
      - ./app:/app
    networks:
      - kafka-net
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - redis

volumes:
  redis-data:

networks:
  kafka-net:
    driver: bridge